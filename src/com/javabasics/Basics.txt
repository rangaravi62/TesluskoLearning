computer can only understand 0's and 1's -> 0,1 binary/machine level language (MLL)
High level language(HLL) -> it is a english like language (+,-,printf,print,scan etc) -> this will be compiled using compiler which will convert HLL into MLL and executed by cpu
Assembly level language(ALL) -> (ADD,SUB,MUL,MOV) like 8085, 8081 etc -> this will be passed through an assembler to convert it into MLL

what is platform dependency?
The code which is written in HLL will be compiled using compiler which converts it into MLL , the MLL will work only in which platform it has been compiled(LINUX,WINDOWS)
so here it will depend on the platform ,ex :  the MLL compiled using windows cannot be used in linux.

Java is platform independent :
Java(HLL,.java) - > java compiler(converts HLL to bytecode in one shot) -> Byte code(.class,neither HLL nor MLL) -> JVM(Internally uses interpreter which executes line by line) -> MLL -> os

the byte code generated by java compiler is platform independent it can be run on any platform


Features of java :
1.simple
2.provides object oriented programming
3.supports multithreading
4.platform independent
5.portable(can carry .jar files to another system)
6.robust(meaning strong -> garbage collection and exception handling)


class -> A class is blueprint or a design which will have properties and methods
object - > object is  an instance of a class

MAIN METHOD :
JVM needs a starting point to execute, jvm identifies the main method and it will start the execution from that point
    public static void main(String[] args) ->
    public -> for jvm to access the main method it  should be public
    static -> jvm don't need to create an object to call the main method
    void -> doesn't return anything


Java is a statically typed programming language :
we need to specify the data types for the variables ex: java, c
NON-statically typed -> ex: python, java script

variables : used to store data
data types : defines the type of data stored in a variable and allocates memory to it

primitive data types:

datatype      no of bytes/bits       default value

int       ->  2 bytes           ->   0
char      ->  2 bytes(unicode)  ->   'ux'
boolean   ->  1 bit             ->   false
byte      ->  1 byte            ->   0
float     ->  4 bytes           ->   0.0
double    ->  8 bytes           ->   0.0
long      ->  8 bytes           ->   0
short     ->  2 bytes           ->   0

all fractional numbers by default double in java

because of these 8 primitive types java is not considered as completely object oriented language

the range of these data types will be -2^(n-1) to 2^(n-1)-1 ex :  for byte n = 1 * 8 =  -128 to 127

type casting : converting one form of data to another
implicit type casting :
byte a =  10;
double b = a this will work fine

double a = 10;
byte b = a;
error: this throws error because we are assigning a bigger data type value to a lesser data type , to acheive this we should use explicit type cating

explixit type casting :
double a = 10;
byte b = (byte)a;
here we are forcefully converting , works fine






